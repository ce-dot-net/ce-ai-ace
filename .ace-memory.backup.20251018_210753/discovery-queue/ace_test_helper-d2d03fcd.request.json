{
  "code_snippet": "\"\"\"ACE Test Helper - Claude Code CLI Simulator\n\nThis module provides utilities to simulate Claude Code CLI behavior for testing\nACE plugin hooks, agents, and scripts without requiring an interactive shell.\n\"\"\"\n\nimport json\nimport subprocess\nfrom pathlib import Path\nfrom dataclasses import dataclass\nfrom typing import Dict, Any, Optional\n\n\n@dataclass\nclass HookResult:\n    \"\"\"Result from hook execution.\"\"\"\n    exit_code: int\n    stdout: str\n    stderr: str\n    json_response: Optional[Dict] = None\n\n\nclass ACETestHelper:\n    \"\"\"Helper class to simulate Claude Code CLI interactions.\"\"\"\n\n    def __init__(self, plugin_root: Path, project_root: Path, env: Dict[str, str]):\n        \"\"\"\n        Initialize ACE Test Helper.\n\n        Args:\n            plugin_root: Path to plugin directory\n            project_root: Path to project directory (usually temp dir in tests)\n            env: Environment variables dict (from claude_env fixture)\n        \"\"\"\n        self.plugin_root = plugin_root\n        self.project_root = project_root\n        self.env = env.copy()\n        self.scripts_dir = plugin_root / 'scripts'\n\n    def run_hook(\n        self,\n        hook_name: str,\n        hook_input: Dict[str, Any],\n        timeout: int = 30\n    ) -> HookResult:\n        \"\"\"\n        Execute a hook script with Claude Code JSON stdin.\n\n        This simulates how Claude Code CLI executes hooks by:\n        1. Setting proper environment variables\n        2. Piping JSON input to the script via stdin\n        3. Capturing stdout/stderr\n        4. Parsing JSON response if present\n\n        Args:\n            hook_name: Name of hook script (e.g., 'ace-cycle', 'inject-playbook')\n            hook_input: Claude Code hook input JSON\n            timeout: Timeout in seconds\n\n        Returns:\n            HookResult with exit_code, stdout, stderr, and optional json_response\n        \"\"\"\n        script_path = self.scripts_dir / f'{hook_name}.py'\n\n        if not script_path.exists():\n            raise FileNotFoundError(f\"H",
  "full_code_length": 7114,
  "file_path": "plugins/ace-orchestration/tests/ace_test_helper.py",
  "language": "python",
  "training_mode": "offline",
  "request_id": "ace_test_helper-d2d03fcd"
}