#!/usr/bin/env python3
"""
spec-kit Playbook Generator - Human-Readable Pattern Documentation

Generates spec-kit structured playbooks from ACE's SQLite database:
- specs/memory/constitution.md (high-confidence principles)
- specs/playbooks/NNN-domain/ (individual pattern directories)

Aligned with ACE research paper and spec-kit conventions.
"""

import sqlite3
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

PROJECT_ROOT = Path.cwd()
DB_PATH = PROJECT_ROOT / '.ace-memory' / 'patterns.db'
SPECS_ROOT = PROJECT_ROOT / 'specs'
PLAYBOOKS_DIR = SPECS_ROOT / 'playbooks'
MEMORY_DIR = SPECS_ROOT / 'memory'

def slugify(text: str) -> str:
    """Convert text to URL-friendly slug."""
    return text.lower().replace(' ', '-').replace('_', '-')

def format_confidence(confidence: float) -> str:
    """Format confidence as percentage."""
    return f"{confidence * 100:.1f}%"

def get_pattern_number(pattern_id: str, observations: int) -> str:
    """
    Generate incremental playbook number.
    Format: NNN where NNN is zero-padded observation count.
    """
    # Extract numeric part from pattern_id or use observations
    try:
        # py-004 -> 004
        parts = pattern_id.split('-')
        if len(parts) >= 2 and parts[1].isdigit():
            return parts[1].zfill(3)
    except:
        pass

    # Fallback to observations count
    return f"{observations:03d}"

def generate_spec_md(pattern: Dict) -> str:
    """Generate spec.md for a pattern (spec-kit format)."""
    yaml_frontmatter = f"""---
pattern_id: {pattern['id']}
name: {pattern['name']}
domain: {pattern['domain']}
language: {pattern['language']}
type: {pattern['type']}
confidence: {pattern['confidence']}
observations: {pattern['observations']}
created_at: {pattern['created_at']}
last_updated: {pattern['last_seen']}
---
"""

    content = f"""# {pattern['name']}

## Pattern Overview

**Domain**: {pattern['domain']}
**Language**: {pattern['language']}
**Type**: {'‚úÖ Helpful' if pattern['type'] == 'helpful' else '‚ùå Anti-pattern'}
**Confidence**: {format_confidence(pattern['confidence'])} ({pattern['observations']} observations)

## Description

{pattern['description']}

## Statistics

- **Total Observations**: {pattern['observations']}
- **Successes**: {pattern['successes']}
- **Failures**: {pattern['failures']}
- **Neutrals**: {pattern['neutrals']}
- **Confidence Score**: {format_confidence(pattern['confidence'])}
- **First Seen**: {pattern['created_at']}
- **Last Updated**: {pattern['last_seen']}

## Pattern ID

```
{pattern['id']}
```

This pattern is tracked in ACE's learning database and evolves based on real-world usage and test results.

## When to Use

{'Apply this pattern in your code.' if pattern['type'] == 'helpful' else 'Avoid this anti-pattern in your code.'}

## Related Patterns

See other patterns in the `{pattern['domain']}` domain.

---

*Auto-generated by ACE (Agentic Context Engineering)*
*Based on research: [arXiv:2510.04618](https://arxiv.org/abs/2510.04618)*
"""

    return yaml_frontmatter + content

def generate_plan_md(pattern: Dict, insights: List[Dict]) -> str:
    """Generate plan.md for a pattern (technical approach)."""
    yaml_frontmatter = f"""---
pattern_id: {pattern['id']}
type: technical_plan
updated: {datetime.now().isoformat()}
---
"""

    # Get latest insight
    latest_insight = insights[0] if insights else None

    content = f"""# Technical Plan: {pattern['name']}

## Summary

This plan describes how to apply the **{pattern['name']}** pattern in {pattern['language']} code.

## Technical Context

- **Language**: {pattern['language']}
- **Domain**: {pattern['domain']}
- **Pattern Type**: {pattern['type']}
- **Confidence**: {format_confidence(pattern['confidence'])}

## Implementation Approach

"""

    if latest_insight:
        content += f"""### Latest Insight

{latest_insight['insight']}

### Recommendation

{latest_insight['recommendation']}

### Applied Correctly

{'‚úÖ Yes' if latest_insight['applied_correctly'] else '‚ö†Ô∏è Needs improvement'}

"""
    else:
        content += """### Approach

1. Identify code sections that could benefit from this pattern
2. Apply the pattern following {language} best practices
3. Verify with tests and linting
4. Monitor effectiveness through ACE feedback

"""

    content += f"""## Success Criteria

- Pattern applied consistently across codebase
- Tests pass after pattern application
- Code readability improved
- ACE confidence score increases

## Examples

See `insights.md` for real-world examples from this codebase.

---

*Auto-generated by ACE (Agentic Context Engineering)*
"""

    return yaml_frontmatter + content

def generate_insights_md(pattern: Dict, insights: List[Dict]) -> str:
    """Generate insights.md with reflector analysis."""
    yaml_frontmatter = f"""---
pattern_id: {pattern['id']}
type: reflector_insights
insight_count: {len(insights)}
updated: {datetime.now().isoformat()}
---
"""

    content = f"""# Insights: {pattern['name']}

## Reflector Analysis

This file contains insights generated by ACE's Reflector agent based on real usage of this pattern in the codebase.

## Insight History

Total insights: {len(insights)}

"""

    if insights:
        for i, insight in enumerate(insights[:10], 1):  # Show latest 10
            timestamp = insight['timestamp']
            content += f"""### Insight #{i} ({timestamp})

**Confidence**: {format_confidence(insight['confidence'])}
**Applied Correctly**: {'‚úÖ Yes' if insight['applied_correctly'] else '‚ö†Ô∏è No'}

#### Analysis

{insight['insight']}

#### Recommendation

{insight['recommendation']}

---

"""
    else:
        content += """No insights yet. This pattern will be analyzed by the Reflector agent as it's used in the codebase.

"""

    content += """## Meta-Learning

These insights help ACE understand:
- When the pattern is most effective
- Common mistakes when applying it
- Edge cases to consider
- Improvements to pattern definition

---

*Auto-generated by ACE Reflector Agent*
"""

    return yaml_frontmatter + content

def generate_constitution_md(high_confidence_patterns: List[Dict]) -> str:
    """Generate constitution.md with high-confidence principles."""
    content = f"""# ACE Constitution - Coding Principles

*Auto-generated from high-confidence patterns (‚â•70%)*
*Last updated: {datetime.now().isoformat()}*
*Total principles: {len(high_confidence_patterns)}*

---

## Purpose

This constitution documents the coding principles learned by ACE from analyzing your codebase. These patterns have achieved ‚â•70% confidence through repeated observation and validation.

## Core Principles

"""

    # Group by domain
    by_domain = {}
    for pattern in high_confidence_patterns:
        domain = pattern['domain']
        if domain not in by_domain:
            by_domain[domain] = []
        by_domain[domain].append(pattern)

    # Generate sections by domain
    for domain, patterns in sorted(by_domain.items()):
        content += f"""### {domain.replace('-', ' ').title()}

"""
        for pattern in patterns:
            type_icon = '‚úÖ' if pattern['type'] == 'helpful' else '‚ùå'
            content += f"""#### {type_icon} {pattern['name']}

**Confidence**: {format_confidence(pattern['confidence'])} ({pattern['observations']} observations)
**Language**: {pattern['language']}

{pattern['description']}

**Playbook**: [`{pattern['id']}`](../playbooks/{get_pattern_number(pattern['id'], pattern['observations'])}-{slugify(pattern['name'])}/spec.md)

---

"""

    content += """## How to Use This Constitution

1. **Review Regularly**: Check this file to understand learned principles
2. **Apply in Code**: Use these patterns when writing new code
3. **Challenge When Needed**: If a principle doesn't fit, ACE will learn and adapt
4. **Share with Team**: This constitution represents your codebase's wisdom

## Evolution

This constitution evolves as ACE learns. Patterns are:
- **Added** when they reach 70% confidence
- **Updated** as confidence changes
- **Removed** if confidence drops below 30% (lazy pruning)

---

*Based on research: [Agentic Context Engineering](https://arxiv.org/abs/2510.04618)*
*Generated by ACE's Curator component*
"""

    return content

def generate_speckit_playbooks():
    """
    Main function: Generate spec-kit structured playbooks from SQLite.
    """
    if not DB_PATH.exists():
        print("‚ùå No pattern database found. Run ACE cycle first.")
        return

    # Create directory structure
    SPECS_ROOT.mkdir(exist_ok=True)
    PLAYBOOKS_DIR.mkdir(exist_ok=True)
    MEMORY_DIR.mkdir(exist_ok=True)

    # Connect to database
    conn = sqlite3.connect(str(DB_PATH))
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # Get all patterns
    cursor.execute('SELECT * FROM patterns ORDER BY confidence DESC, observations DESC')
    patterns = [dict(row) for row in cursor.fetchall()]

    if not patterns:
        print("‚ùå No patterns found in database.")
        conn.close()
        return

    print(f"üìö Generating spec-kit playbooks for {len(patterns)} patterns...")

    # Generate individual playbooks
    for pattern in patterns:
        pattern_id = pattern['id']
        pattern_num = get_pattern_number(pattern_id, pattern['observations'])
        playbook_name = f"{pattern_num}-{slugify(pattern['name'])}"
        playbook_dir = PLAYBOOKS_DIR / playbook_name

        # Create playbook directory
        playbook_dir.mkdir(exist_ok=True)

        # Get insights for this pattern
        cursor.execute('''
            SELECT * FROM insights
            WHERE pattern_id = ?
            ORDER BY timestamp DESC
        ''', (pattern_id,))
        insights = [dict(row) for row in cursor.fetchall()]

        # Generate files
        (playbook_dir / 'spec.md').write_text(generate_spec_md(pattern))
        (playbook_dir / 'plan.md').write_text(generate_plan_md(pattern, insights))
        (playbook_dir / 'insights.md').write_text(generate_insights_md(pattern, insights))

        print(f"  ‚úÖ {playbook_name}/")

    # Generate constitution from high-confidence patterns
    high_confidence = [p for p in patterns if p['confidence'] >= 0.70]
    constitution_path = MEMORY_DIR / 'constitution.md'
    constitution_path.write_text(generate_constitution_md(high_confidence))
    print(f"  ‚úÖ memory/constitution.md ({len(high_confidence)} principles)")

    conn.close()

    print(f"\n‚úÖ spec-kit playbooks generated successfully!")
    print(f"   Location: {SPECS_ROOT}/")
    print(f"   Playbooks: {len(patterns)}")
    print(f"   High-confidence principles: {len(high_confidence)}")

if __name__ == '__main__':
    generate_speckit_playbooks()
