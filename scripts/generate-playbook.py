#!/usr/bin/env python3
"""
Generate CLAUDE.md playbook from learned patterns

Reads patterns from SQLite database and generates comprehensive
markdown playbook organized by confidence levels.
"""

import sqlite3
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict

PROJECT_ROOT = Path.cwd()
DB_PATH = PROJECT_ROOT / '.ace-memory' / 'patterns.db'
PLAYBOOK_PATH = PROJECT_ROOT / 'CLAUDE.md'

CONFIDENCE_HIGH = 0.7  # 70%
CONFIDENCE_LOW = 0.3   # 30%

def get_patterns_with_insights() -> List[Dict]:
    """Get all patterns with their insights from database."""
    if not DB_PATH.exists():
        return []

    conn = sqlite3.connect(str(DB_PATH))
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # Get patterns
    cursor.execute('SELECT * FROM patterns ORDER BY confidence DESC, observations DESC')
    patterns = [dict(row) for row in cursor.fetchall()]

    # Get insights for each pattern
    for pattern in patterns:
        cursor.execute('''
            SELECT * FROM insights
            WHERE pattern_id = ?
            ORDER BY timestamp DESC
            LIMIT 5
        ''', (pattern['id'],))
        pattern['insights'] = [dict(row) for row in cursor.fetchall()]

    conn.close()
    return patterns

def generate_playbook():
    """Generate CLAUDE.md playbook."""
    patterns = get_patterns_with_insights()

    if not patterns:
        # No patterns yet, create minimal playbook
        content = """# ACE Playbook

*Auto-generated by ACE (Agentic Context Engineering)*
*Last updated: """ + datetime.now().isoformat() + """*

**No patterns learned yet.** Patterns will be automatically detected and analyzed as you code.

## 📊 Statistics
- Total patterns: 0
- Observations: 0

## 🚀 Getting Started

The ACE plugin will automatically:
1. Detect patterns in your code (Python, JavaScript, TypeScript)
2. Analyze their effectiveness based on test results
3. Build this playbook with actionable insights

Start coding, and watch this playbook evolve!

## 💡 Commands

- `/ace-status` - View learning statistics
- `/ace-patterns` - List all learned patterns
- `/ace-force-reflect` - Manually trigger reflection on a file
- `/ace-clear` - Reset pattern database
"""
        PLAYBOOK_PATH.write_text(content)
        return

    # Group patterns by confidence
    high = [p for p in patterns if p['confidence'] >= CONFIDENCE_HIGH]
    medium = [p for p in patterns if CONFIDENCE_LOW <= p['confidence'] < CONFIDENCE_HIGH]
    low = [p for p in patterns if p['confidence'] < CONFIDENCE_LOW]
    anti_patterns = [p for p in patterns if p['type'] == 'harmful' and p['confidence'] >= CONFIDENCE_HIGH]

    # Calculate stats
    total_observations = sum(p['observations'] for p in patterns)
    total_successes = sum(p['successes'] for p in patterns)
    success_rate = (total_successes / total_observations * 100) if total_observations > 0 else 0

    # Generate markdown
    content = f"""# ACE Playbook

*Auto-generated by ACE (Agentic Context Engineering)*
*Last updated: {datetime.now().isoformat()}*
*Total patterns: {len(patterns)}*

## 📊 Statistics

- **Total Observations**: {total_observations}
- **Success Rate**: {success_rate:.1f}%
- **High Confidence Patterns**: {len(high)} (≥70%)
- **Medium Confidence Patterns**: {len(medium)} (30-70%)
- **Low Confidence Patterns**: {len(low)} (<30%)
- **Anti-Patterns Identified**: {len(anti_patterns)}

---

"""

    # High-confidence patterns
    if high:
        content += "## 🎯 High-Confidence Patterns (≥70%)\n\n"
        content += "These patterns have proven effective through multiple observations.\n\n"

        for pattern in high:
            content += f"### {pattern['name']}\n\n"
            content += f"**ID**: `{pattern['id']}`  \n"
            content += f"**Domain**: {pattern['domain']}  \n"
            content += f"**Language**: {pattern['language']}  \n"
            content += f"**Confidence**: {pattern['confidence']*100:.1f}% ({pattern['successes']}/{pattern['observations']} successes)  \n"
            content += f"**Type**: {'✅ Helpful' if pattern['type'] == 'helpful' else '🚫 Harmful'}  \n\n"

            content += f"**Description**: {pattern['description']}\n\n"

            if pattern['insights']:
                content += "💡 **Recent Insights**:\n"
                for insight in pattern['insights'][:3]:  # Show top 3
                    timestamp = datetime.fromisoformat(insight['timestamp']).strftime('%Y-%m-%d')
                    content += f"- [{timestamp}] {insight['insight']}\n"
                content += "\n"

                # Show latest recommendation
                latest = pattern['insights'][0]
                content += f"📋 **Recommendation**: {latest['recommendation']}\n\n"

            content += "---\n\n"

    # Medium-confidence patterns
    if medium:
        content += "## ⚙️ Medium-Confidence Patterns (30-70%)\n\n"
        content += "⚠️ These patterns show promise but need more observations. Verify before relying on them.\n\n"

        for pattern in medium:
            content += f"### {pattern['name']}\n\n"
            content += f"**ID**: `{pattern['id']}`  \n"
            content += f"**Confidence**: {pattern['confidence']*100:.1f}% ({pattern['successes']}/{pattern['observations']} successes)  \n"
            content += f"**Domain**: {pattern['domain']} | **Language**: {pattern['language']}  \n\n"
            content += f"{pattern['description']}\n\n"

            if pattern['insights']:
                latest = pattern['insights'][0]
                content += f"💡 **Latest**: {latest['insight']}\n\n"

            content += "---\n\n"

    # Anti-patterns
    if anti_patterns:
        content += "## 🚫 Anti-Patterns (Avoid These)\n\n"
        content += "These harmful patterns have been identified and should be avoided.\n\n"

        for pattern in anti_patterns:
            content += f"### ❌ {pattern['name']}\n\n"
            content += f"**ID**: `{pattern['id']}`  \n"
            content += f"**Confidence**: {pattern['confidence']*100:.1f}% ({pattern['failures']}/{pattern['observations']} failures)  \n"
            content += f"**Domain**: {pattern['domain']} | **Language**: {pattern['language']}  \n\n"
            content += f"**Why to Avoid**: {pattern['description']}\n\n"

            if pattern['insights']:
                latest = pattern['insights'][0]
                content += f"⚠️ **Warning**: {latest['insight']}\n\n"

            content += "---\n\n"

    # Low-confidence patterns (may be pruned)
    if low:
        content += "## 🔍 Low-Confidence Patterns (<30%)\n\n"
        content += "*These patterns may be pruned if they don't improve after more observations.*\n\n"

        for pattern in low:
            content += f"- **{pattern['name']}** ({pattern['confidence']*100:.0f}%, {pattern['observations']} obs)\n"

        content += "\n---\n\n"

    # Footer
    content += """## 💡 ACE Commands

- `/ace-status` - View detailed learning statistics
- `/ace-patterns [domain] [min-confidence]` - List patterns with filtering
- `/ace-force-reflect [file]` - Manually trigger reflection on a file
- `/ace-clear --confirm` - Reset pattern database

---

*This playbook evolves automatically as you code. Patterns are learned from your coding style and validated through test results.*

*Based on research: [Agentic Context Engineering](https://arxiv.org/abs/2510.04618)*
"""

    # Write playbook
    PLAYBOOK_PATH.write_text(content)
    print(f"✅ Playbook updated: {len(patterns)} patterns", file=sys.stderr)

if __name__ == '__main__':
    try:
        generate_playbook()
        sys.exit(0)
    except Exception as e:
        print(f"❌ Failed to generate playbook: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc(file=sys.stderr)
        sys.exit(1)
