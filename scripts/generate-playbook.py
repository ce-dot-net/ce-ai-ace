#!/usr/bin/env python3
"""
Generate CLAUDE.md playbook from learned patterns

Implements ACE paper's bulletized structure with proper sections:
- STRATEGIES AND HARD RULES
- USEFUL CODE SNIPPETS AND TEMPLATES
- TROUBLESHOOTING AND PITFALLS
- APIS TO USE FOR SPECIFIC INFORMATION
- VERIFICATION CHECKLIST

ACE Phase 3: Uses delta updates instead of full rewrites to prevent context collapse.

Reads patterns from SQLite database and generates comprehensive
markdown playbook organized by ACE sections and confidence levels.
"""

import sqlite3
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict

PROJECT_ROOT = Path.cwd()
DB_PATH = PROJECT_ROOT / '.ace-memory' / 'patterns.db'
PLAYBOOK_PATH = PROJECT_ROOT / 'CLAUDE.md'

CONFIDENCE_HIGH = 0.7  # 70%
CONFIDENCE_MEDIUM = 0.3   # 30%

def get_patterns_with_insights() -> List[Dict]:
    """Get all patterns with their insights from database."""
    if not DB_PATH.exists():
        return []

    conn = sqlite3.connect(str(DB_PATH))
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # Get patterns
    cursor.execute('SELECT * FROM patterns ORDER BY confidence DESC, observations DESC')
    patterns = [dict(row) for row in cursor.fetchall()]

    # Get insights for each pattern
    for pattern in patterns:
        cursor.execute('''
            SELECT * FROM insights
            WHERE pattern_id = ?
            ORDER BY timestamp DESC
            LIMIT 5
        ''', (pattern['id'],))
        pattern['insights'] = [dict(row) for row in cursor.fetchall()]

    conn.close()
    return patterns


def generate_playbook():
    """Generate CLAUDE.md playbook with ACE structure."""
    patterns = get_patterns_with_insights()

    if not patterns:
        # No patterns yet, create minimal playbook
        content = f"""# ACE Playbook

*Auto-generated by ACE (Agentic Context Engineering)*
*Last updated: {datetime.now().isoformat()}*

**No patterns learned yet.** Patterns will be automatically detected and analyzed as you code.

## 📊 Statistics
- Total patterns: 0
- Observations: 0

## 🚀 Getting Started

The ACE plugin will automatically:
1. Detect patterns in your code (Python, JavaScript, TypeScript)
2. Analyze their effectiveness based on test results
3. Build this playbook with actionable insights

Start coding, and watch this playbook evolve!

## 💡 Commands

- `/ace-status` - View learning statistics
- `/ace-patterns` - List all learned patterns
- `/ace-force-reflect` - Manually trigger reflection on a file
- `/ace-clear` - Reset pattern database
"""
        PLAYBOOK_PATH.write_text(content)
        return

    # Calculate stats
    total_observations = sum(p['observations'] for p in patterns)
    total_successes = sum(p['successes'] for p in patterns)
    success_rate = (total_successes / total_observations * 100) if total_observations > 0 else 0

    # Group patterns by type and confidence
    high = [p for p in patterns if p['confidence'] >= CONFIDENCE_HIGH]
    medium = [p for p in patterns if CONFIDENCE_MEDIUM <= p['confidence'] < CONFIDENCE_HIGH]
    low = [p for p in patterns if p['confidence'] < CONFIDENCE_MEDIUM]
    anti_patterns = [p for p in patterns if p['type'] == 'harmful' and p['confidence'] >= CONFIDENCE_HIGH]

    # Generate markdown with ACE sections
    content = f"""# ACE Playbook

*Auto-generated by ACE (Agentic Context Engineering)*
*Last updated: {datetime.now().isoformat()}*
*Total patterns: {len(patterns)}*

## 📊 Statistics

- **Total Observations**: {total_observations}
- **Success Rate**: {success_rate:.1f}%
- **High Confidence Patterns**: {len(high)} (≥70%)
- **Medium Confidence Patterns**: {len(medium)} (30-70%)
- **Low Confidence Patterns**: {len(low)} (<30%)
- **Anti-Patterns Identified**: {len(anti_patterns)}

---

"""

    # SECTION 1: STRATEGIES AND HARD RULES
    if high:
        content += "## 🎯 STRATEGIES AND HARD RULES\n\n"
        content += "*High-confidence patterns (≥70%) proven effective through multiple observations.*\n\n"

        for pattern in high:
            bullet_id = pattern.get('bullet_id', f"[{pattern['id']}]")
            helpful = pattern.get('helpful_count', 0)
            harmful = pattern.get('harmful_count', 0)

            content += f"{bullet_id} helpful={helpful} harmful={harmful} :: **{pattern['name']}**  \n"
            content += f"*Domain: {pattern['domain']} | Language: {pattern['language']} | Confidence: {pattern['confidence']*100:.1f}% ({pattern['successes']}/{pattern['observations']})*\n\n"
            content += f"{pattern['description']}\n\n"

            if pattern['insights']:
                latest = pattern['insights'][0]
                content += f"💡 **Latest Insight**: {latest['insight']}\n\n"
                content += f"📋 **Recommendation**: {latest['recommendation']}\n\n"

            content += "---\n\n"

    # SECTION 2: USEFUL CODE SNIPPETS AND TEMPLATES
    code_patterns = [p for p in high if 'code' in p['description'].lower() or 'snippet' in p['description'].lower()]
    if code_patterns:
        content += "## 💻 USEFUL CODE SNIPPETS AND TEMPLATES\n\n"
        content += "*Ready-to-use code patterns and templates.*\n\n"

        for pattern in code_patterns:
            bullet_id = pattern.get('bullet_id', f"[{pattern['id']}]")
            content += f"{bullet_id} :: **{pattern['name']}**\n\n"
            content += f"```{pattern['language']}\n# {pattern['description']}\n```\n\n"
            content += "---\n\n"

    # SECTION 3: TROUBLESHOOTING AND PITFALLS
    if anti_patterns or low:
        content += "## 🚫 TROUBLESHOOTING AND PITFALLS\n\n"
        content += "*Common mistakes and anti-patterns to avoid.*\n\n"

        for pattern in anti_patterns:
            bullet_id = pattern.get('bullet_id', f"[{pattern['id']}]")
            helpful = pattern.get('helpful_count', 0)
            harmful = pattern.get('harmful_count', 0)

            content += f"{bullet_id} helpful={helpful} harmful={harmful} :: ❌ **{pattern['name']}**  \n"
            content += f"*Confidence: {pattern['confidence']*100:.1f}% harmful*\n\n"
            content += f"**Why to Avoid**: {pattern['description']}\n\n"

            if pattern['insights']:
                latest = pattern['insights'][0]
                content += f"⚠️ **Warning**: {latest['insight']}\n\n"

            content += "---\n\n"

    # SECTION 4: MEDIUM-CONFIDENCE PATTERNS (Needs Validation)
    if medium:
        content += "## ⚙️ PATTERNS UNDER VALIDATION (30-70% Confidence)\n\n"
        content += "*These show promise but need more observations. Verify before relying on them.*\n\n"

        for pattern in medium:
            bullet_id = pattern.get('bullet_id', f"[{pattern['id']}]")
            content += f"{bullet_id} :: **{pattern['name']}** ({pattern['confidence']*100:.1f}%, {pattern['observations']} obs)  \n"
            content += f"{pattern['description']}\n\n"

    # SECTION 5: LOW-CONFIDENCE PATTERNS (May be pruned)
    if low:
        content += "## 🔍 LOW-CONFIDENCE PATTERNS (<30%)\n\n"
        content += "*May be pruned if they don't improve after more observations.*\n\n"

        for pattern in low:
            bullet_id = pattern.get('bullet_id', f"[{pattern['id']}]")
            content += f"- {bullet_id} **{pattern['name']}** ({pattern['confidence']*100:.0f}%, {pattern['observations']} obs)\n"

        content += "\n---\n\n"

    # Footer
    content += """## 💡 ACE Commands

- `/ace-status` - View detailed learning statistics
- `/ace-patterns [domain] [min-confidence]` - List patterns with filtering
- `/ace-force-reflect [file]` - Manually trigger reflection on a file
- `/ace-clear --confirm` - Reset pattern database

---

*This playbook evolves automatically as you code. Patterns are learned from your coding style and validated through test results.*

*Based on research: [Agentic Context Engineering](https://arxiv.org/abs/2510.04618) by Stanford/SambaNova/UC Berkeley*
"""

    # Apply delta update (ACE Phase 3: incremental updates only)
    try:
        # Import delta updater
        import sys
        sys.path.insert(0, str(Path(__file__).parent))
        from playbook_delta_updater import update_playbook_with_delta

        # Use delta update instead of full rewrite
        success = update_playbook_with_delta(content)

        if success:
            print(f"✅ Playbook updated (delta): {len(patterns)} patterns", file=sys.stderr)
        else:
            # Fallback to full write only on first run
            if not PLAYBOOK_PATH.exists():
                PLAYBOOK_PATH.write_text(content)
                print(f"✅ Playbook created: {len(patterns)} patterns", file=sys.stderr)
            else:
                print(f"ℹ️  No changes to apply", file=sys.stderr)

    except Exception as e:
        # Fallback to full write on error (safety)
        print(f"⚠️  Delta update failed ({e}), falling back to full write", file=sys.stderr)
        PLAYBOOK_PATH.write_text(content)
        print(f"✅ Playbook updated: {len(patterns)} patterns", file=sys.stderr)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Generate ACE playbooks')
    parser.add_argument('--format',
                       choices=['legacy', 'speckit', 'both'],
                       default='both',
                       help='Playbook format to generate (default: both)')

    args = parser.parse_args()

    try:
        # Generate legacy CLAUDE.md
        if args.format in ['legacy', 'both']:
            generate_playbook()

        # Generate spec-kit structure
        if args.format in ['speckit', 'both']:
            try:
                import importlib.util

                # Import generate-speckit-playbook.py (with hyphen)
                spec = importlib.util.spec_from_file_location(
                    "generate_speckit_playbook",
                    Path(__file__).parent / "generate-speckit-playbook.py"
                )
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                module.generate_speckit_playbooks()
            except Exception as e:
                print(f"⚠️  spec-kit generation failed: {e}", file=sys.stderr)
                if args.format == 'speckit':
                    # If only speckit requested, this is an error
                    raise

        sys.exit(0)
    except Exception as e:
        print(f"❌ Failed to generate playbook: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc(file=sys.stderr)
        sys.exit(1)
