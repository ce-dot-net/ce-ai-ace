{
  "code_snippet": "#!/usr/bin/env python3\n\"\"\"\nTest suite for ACE Plugin Phase 3-5 features\n\nRun this after updating the plugin to verify all new features work correctly.\n\"\"\"\n\nimport sys\nimport json\nimport sqlite3\nfrom pathlib import Path\n\n# Test results\ntests_passed = 0\ntests_failed = 0\n\ndef test(name):\n    \"\"\"Test decorator\"\"\"\n    def decorator(func):\n        def wrapper():\n            global tests_passed, tests_failed\n            try:\n                print(f\"\\n\ud83e\uddea Testing: {name}\")\n                result = func()\n                if result:\n                    print(f\"   \u2705 PASS\")\n                    tests_passed += 1\n                else:\n                    print(f\"   \u274c FAIL\")\n                    tests_failed += 1\n            except Exception as e:\n                print(f\"   \u274c ERROR: {e}\")\n                tests_failed += 1\n        return wrapper\n    return decorator\n\n@test(\"Database migration (Phase 2)\")\ndef test_database_migration():\n    \"\"\"Check if database has Phase 2 schema\"\"\"\n    db_path = Path('.ace-memory/patterns.db')\n    if not db_path.exists():\n        print(\"   \u26a0\ufe0f  No database yet (will be created on first run)\")\n        return True\n\n    conn = sqlite3.connect(str(db_path))\n    cursor = conn.cursor()\n\n    # Check for bullet_id column\n    cursor.execute(\"PRAGMA table_info(patterns)\")\n    columns = {row[1] for row in cursor.fetchall()}\n\n    has_bullet_id = 'bullet_id' in columns\n    has_helpful = 'helpful_count' in columns\n    has_harmful = 'harmful_count' in columns\n\n    conn.close()\n\n    if has_bullet_id and has_helpful and has_harmful:\n        print(\"   \u2713 bullet_id, helpful_count, harmful_count present\")\n        return True\n    else:\n        print(f\"   \u2717 Missing: bullet_id={has_bullet_id}, helpful={has_helpful}, harmful={has_harmful}\")\n        return False\n\n@test(\"Embeddings engine\")\ndef test_embeddings_engine():\n    \"\"\"Check if embeddings engine is functional\"\"\"\n    try:\n        from scripts import embeddings_engine as emb\n\n        # Test similarity\n        sim = emb.calc",
  "full_code_length": 7715,
  "file_path": "plugins/ace-orchestration/tests/test-phase-3-5.py",
  "language": "python",
  "training_mode": "offline"
}