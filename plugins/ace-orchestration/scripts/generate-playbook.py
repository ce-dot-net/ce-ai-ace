#!/usr/bin/env python3
"""
Generate CLAUDE.md with ACE plugin instructions

CLAUDE.md contains INSTRUCTIONS ONLY - not a pattern database!

Pattern storage:
- Source of truth: .ace-memory/patterns.db (SQLite)
- Human-readable: specs/playbooks/ (git-tracked, spec-kit format)

This script generates a clean, compact CLAUDE.md that points users to where patterns are actually stored.
ACE uses delta updates (HTML markers) to preserve user content and other plugins' sections.
"""

import sqlite3
import sys
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

PROJECT_ROOT = Path.cwd()
DB_PATH = PROJECT_ROOT / '.ace-memory' / 'patterns.db'
PLAYBOOK_PATH = PROJECT_ROOT / 'CLAUDE.md'
TAXONOMY_PATH = PROJECT_ROOT / '.ace-memory' / 'domain_taxonomy.json'

CONFIDENCE_HIGH = 0.7  # 70%
CONFIDENCE_MEDIUM = 0.3   # 30%

def get_patterns_with_insights() -> List[Dict]:
    """Get all patterns with their insights from database."""
    if not DB_PATH.exists():
        return []

    conn = sqlite3.connect(str(DB_PATH))
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # Get patterns
    cursor.execute('SELECT * FROM patterns ORDER BY confidence DESC, observations DESC')
    patterns = [dict(row) for row in cursor.fetchall()]

    # Get insights for each pattern
    for pattern in patterns:
        cursor.execute('''
            SELECT * FROM insights
            WHERE pattern_id = ?
            ORDER BY timestamp DESC
            LIMIT 5
        ''', (pattern['id'],))
        pattern['insights'] = [dict(row) for row in cursor.fetchall()]

    conn.close()
    return patterns


def load_domain_taxonomy() -> Optional[Dict]:
    """Load discovered domain taxonomy from JSON file."""
    if not TAXONOMY_PATH.exists():
        return None

    try:
        with open(TAXONOMY_PATH, 'r') as f:
            taxonomy = json.load(f)
        return taxonomy
    except Exception as e:
        print(f"‚ö†Ô∏è  Failed to load domain taxonomy: {e}", file=sys.stderr)
        return None


def safe_merge_ace_section(ace_content: str) -> None:
    """
    Safely merge ACE section into existing CLAUDE.md without destroying user content.

    Uses HTML-style markers to identify ACE plugin section:
    - <!-- ACE-PLUGIN-START --> ... <!-- ACE-PLUGIN-END -->

    If CLAUDE.md doesn't exist, creates it with ACE section.
    If it exists, replaces ONLY the ACE section, preserving everything else.
    """
    import re

    ACE_START_MARKER = "<!-- ACE-PLUGIN-START -->"
    ACE_END_MARKER = "<!-- ACE-PLUGIN-END -->"

    # Wrap ACE content with markers
    wrapped_content = f"{ACE_START_MARKER}\n{ace_content}\n{ACE_END_MARKER}"

    if not PLAYBOOK_PATH.exists():
        # No existing file - create with ACE section
        PLAYBOOK_PATH.write_text(wrapped_content)
        print("‚ú® Created CLAUDE.md with ACE section", file=sys.stderr)
        return

    # Read existing content
    existing_content = PLAYBOOK_PATH.read_text()

    # Check if ACE section already exists
    if ACE_START_MARKER in existing_content and ACE_END_MARKER in existing_content:
        # Replace existing ACE section
        pattern = f"{re.escape(ACE_START_MARKER)}.*?{re.escape(ACE_END_MARKER)}"
        merged_content = re.sub(
            pattern,
            wrapped_content,
            existing_content,
            flags=re.DOTALL
        )
        PLAYBOOK_PATH.write_text(merged_content)
        print("‚úÖ Updated ACE section in CLAUDE.md (user content preserved)", file=sys.stderr)
    else:
        # Append ACE section to existing content
        merged_content = f"{existing_content}\n\n{wrapped_content}"
        PLAYBOOK_PATH.write_text(merged_content)
        print("‚úÖ Appended ACE section to existing CLAUDE.md (user content preserved)", file=sys.stderr)


def generate_playbook():
    """Generate CLAUDE.md playbook with ACE structure - INSTRUCTIONS ONLY."""
    patterns = get_patterns_with_insights()

    if not patterns:
        # No patterns yet, create minimal playbook
        content = f"""# ACE Plugin Instructions

*Auto-generated by ACE (Agentic Context Engineering)*
*Last updated: {datetime.now().isoformat()}*

## üìä Pattern Database

**No patterns learned yet.** ACE will automatically detect and analyze patterns as you code.

- **Location**: `.ace-memory/patterns.db` (SQLite database)
- **Current**: 0 patterns, 0 observations
- **View stats**: `/ace-status`
- **List patterns**: `/ace-patterns [domain] [min-confidence]`

## üìö Human-Readable Playbooks

Pattern documentation is auto-generated in:
- **Location**: `specs/playbooks/` (git-tracked)
- **Format**: One directory per pattern (spec.md, plan.md, insights.md)
- **Constitution**: `specs/memory/constitution.md` (high-confidence principles ‚â•70%)

## üîÑ How ACE Works

1. **PostToolUse hook** fires after Edit/Write operations
2. **Reflector agent** discovers patterns from raw code (no pre-detection)
3. **Curator** merges/prunes patterns (85% similarity, 30% confidence thresholds)
4. **Playbooks** auto-generated in both formats (CLAUDE.md + specs/)

## üí° Commands

- `/ace-status` - View detailed learning statistics
- `/ace-patterns [domain] [min-confidence]` - List patterns with filtering
- `/ace-force-reflect [file]` - Manually trigger reflection
- `/ace-train-offline` - Run multi-epoch training
- `/ace-clear --confirm` - Reset pattern database

---

*Research: [Agentic Context Engineering](https://arxiv.org/abs/2510.04618) by Stanford/SambaNova/UC Berkeley*
"""
        safe_merge_ace_section(content)
        return

    # Calculate stats
    total_observations = sum(p['observations'] for p in patterns)
    total_successes = sum(p['successes'] for p in patterns)
    success_rate = (total_successes / total_observations * 100) if total_observations > 0 else 0

    # Group patterns by type and confidence
    high = [p for p in patterns if p['confidence'] >= CONFIDENCE_HIGH]
    medium = [p for p in patterns if CONFIDENCE_MEDIUM <= p['confidence'] < CONFIDENCE_HIGH]
    low = [p for p in patterns if p['confidence'] < CONFIDENCE_MEDIUM]
    anti_patterns = [p for p in patterns if p['type'] == 'harmful' and p['confidence'] >= CONFIDENCE_HIGH]

    # Generate markdown with ACE sections - INSTRUCTIONS ONLY, NOT A DATABASE
    content = f"""# ACE Plugin Instructions

*Auto-generated by ACE (Agentic Context Engineering)*
*Last updated: {datetime.now().isoformat()}*

## üìä Pattern Database

- **Location**: `.ace-memory/patterns.db` (SQLite database - source of truth)
- **Total patterns**: {len(patterns)} ({len(high)} high-confidence, {len(medium)} medium, {len(low)} low)
- **Total Observations**: {total_observations}
- **Success Rate**: {success_rate:.1f}%
- **View stats**: `/ace-status`
- **List patterns**: `/ace-patterns [domain] [min-confidence]`

## üìö Human-Readable Playbooks

Pattern documentation is auto-generated in git-tracked format:
- **Location**: `specs/playbooks/` ({len(patterns)} playbook directories)
- **Format**: One directory per pattern (spec.md, plan.md, insights.md)
- **Constitution**: `specs/memory/constitution.md` ({len(high)} high-confidence principles ‚â•70%)

## üéØ High-Confidence Patterns (‚â•70%)

{len(high)} patterns have reached production-ready confidence. See `specs/memory/constitution.md` for details.

## üîÑ How ACE Works

1. **PostToolUse hook** fires after Edit/Write operations
2. **Reflector agent** discovers patterns from raw code (no pre-detection)
3. **Curator** merges/prunes patterns (85% similarity, 30% confidence thresholds)
4. **Playbooks** auto-generated in both formats (CLAUDE.md + specs/)

## üí° Commands

- `/ace-status` - View detailed learning statistics
- `/ace-patterns [domain] [min-confidence]` - List patterns with filtering
- `/ace-force-reflect [file]` - Manually trigger reflection
- `/ace-train-offline` - Run multi-epoch training
- `/ace-clear --confirm` - Reset pattern database

---

*Research: [Agentic Context Engineering](https://arxiv.org/abs/2510.04618) by Stanford/SambaNova/UC Berkeley*

**Note**: This file contains instructions only. Full pattern details are in:
- `.ace-memory/patterns.db` (SQLite - query with `/ace-patterns`)
- `specs/playbooks/` (human-readable documentation)
"""

    # Use safe merging to preserve user content and other plugin sections
    safe_merge_ace_section(content)
    print(f"‚úÖ ACE instructions updated: {len(patterns)} total patterns ({len(high)} high-confidence)", file=sys.stderr)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Generate ACE playbooks')
    parser.add_argument('--format',
                       choices=['legacy', 'speckit', 'both'],
                       default='both',
                       help='Playbook format to generate (default: both)')

    args = parser.parse_args()

    try:
        # Generate legacy CLAUDE.md
        if args.format in ['legacy', 'both']:
            generate_playbook()

        # Generate spec-kit structure
        if args.format in ['speckit', 'both']:
            try:
                import importlib.util

                # Import generate-speckit-playbook.py (with hyphen)
                spec = importlib.util.spec_from_file_location(
                    "generate_speckit_playbook",
                    Path(__file__).parent / "generate-speckit-playbook.py"
                )
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                module.generate_speckit_playbooks()
            except Exception as e:
                print(f"‚ö†Ô∏è  spec-kit generation failed: {e}", file=sys.stderr)
                if args.format == 'speckit':
                    # If only speckit requested, this is an error
                    raise

        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Failed to generate playbook: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc(file=sys.stderr)
        sys.exit(1)
