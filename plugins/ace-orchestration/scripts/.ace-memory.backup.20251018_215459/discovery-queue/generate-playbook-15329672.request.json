{
  "code_snippet": "#!/usr/bin/env python3\n\"\"\"\nGenerate CLAUDE.md with ACE plugin instructions\n\nCLAUDE.md contains INSTRUCTIONS ONLY - not a pattern database!\n\nPattern storage:\n- Source of truth: .ace-memory/patterns.db (SQLite)\n- Human-readable: specs/playbooks/ (git-tracked, spec-kit format)\n\nThis script generates a clean, compact CLAUDE.md that points users to where patterns are actually stored.\nACE uses delta updates (HTML markers) to preserve user content and other plugins' sections.\n\"\"\"\n\nimport sqlite3\nimport sys\nimport json\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import List, Dict, Optional\n\nPROJECT_ROOT = Path.cwd()\nDB_PATH = PROJECT_ROOT / '.ace-memory' / 'patterns.db'\nPLAYBOOK_PATH = PROJECT_ROOT / 'CLAUDE.md'\nTAXONOMY_PATH = PROJECT_ROOT / '.ace-memory' / 'domain_taxonomy.json'\n\nCONFIDENCE_HIGH = 0.7  # 70%\nCONFIDENCE_MEDIUM = 0.3   # 30%\n\ndef get_patterns_with_insights() -> List[Dict]:\n    \"\"\"Get all patterns with their insights from database.\"\"\"\n    if not DB_PATH.exists():\n        return []\n\n    conn = sqlite3.connect(str(DB_PATH))\n    conn.row_factory = sqlite3.Row\n    cursor = conn.cursor()\n\n    # Get patterns\n    cursor.execute('SELECT * FROM patterns ORDER BY confidence DESC, observations DESC')\n    patterns = [dict(row) for row in cursor.fetchall()]\n\n    # Get insights for each pattern\n    for pattern in patterns:\n        cursor.execute('''\n            SELECT * FROM insights\n            WHERE pattern_id = ?\n            ORDER BY timestamp DESC\n            LIMIT 5\n        ''', (pattern['id'],))\n        pattern['insights'] = [dict(row) for row in cursor.fetchall()]\n\n    conn.close()\n    return patterns\n\n\ndef load_domain_taxonomy() -> Optional[Dict]:\n    \"\"\"Load discovered domain taxonomy from JSON file.\"\"\"\n    if not TAXONOMY_PATH.exists():\n        return None\n\n    try:\n        with open(TAXONOMY_PATH, 'r') as f:\n            taxonomy = json.load(f)\n        return taxonomy\n    except Exception as e:\n        print(f\"\u26a0\ufe0f  Failed to load domain tax",
  "full_code_length": 9988,
  "file_path": "plugins/ace-orchestration/scripts/generate-playbook.py",
  "language": "python",
  "training_mode": "offline",
  "request_id": "generate-playbook-15329672"
}