{
  "patterns": [
    {
      "id": "python-decorator-test-framework",
      "name": "Custom test decorator pattern",
      "description": "Implement custom test framework using decorator pattern to wrap test functions with automatic pass/fail counting and error handling",
      "domain": "python-testing",
      "confidence": 0.95
    },
    {
      "id": "pathlib-path-handling",
      "name": "pathlib for file path operations",
      "description": "Use pathlib.Path instead of os.path for modern, object-oriented file path handling and existence checks",
      "domain": "python-file-operations",
      "confidence": 0.95
    },
    {
      "id": "sqlite3-schema-introspection",
      "name": "SQLite schema validation with PRAGMA",
      "description": "Use PRAGMA table_info() to introspect database schema and validate column existence programmatically",
      "domain": "sqlite-database-operations",
      "confidence": 0.9
    },
    {
      "id": "sqlite3-connection-context",
      "name": "Manual SQLite connection management",
      "description": "Explicitly open and close SQLite connections with connect() and close() methods for database operations",
      "domain": "sqlite-database-operations",
      "confidence": 0.85
    },
    {
      "id": "global-state-tracking",
      "name": "Global counters for test metrics",
      "description": "Use global variables to track aggregate test results (tests_passed, tests_failed) across multiple test functions",
      "domain": "python-testing",
      "confidence": 0.9
    },
    {
      "id": "dynamic-module-import",
      "name": "Dynamic module loading with importlib",
      "description": "Use importlib.util.spec_from_file_location and module_from_spec to dynamically load Python modules from file paths",
      "domain": "python-dynamic-imports",
      "confidence": 0.85
    },
    {
      "id": "sys-path-manipulation",
      "name": "Runtime sys.path modification",
      "description": "Insert paths into sys.path at runtime to enable imports from non-standard locations",
      "domain": "python-dynamic-imports",
      "confidence": 0.8
    },
    {
      "id": "json-file-validation",
      "name": "JSON configuration file validation",
      "description": "Load JSON configuration files and validate expected keys/structure are present",
      "domain": "json-config-handling",
      "confidence": 0.85
    },
    {
      "id": "file-permission-checking",
      "name": "Unix file permission validation",
      "description": "Check file executable permissions using path.stat().st_mode & 0o111 for script validation",
      "domain": "python-file-operations",
      "confidence": 0.8
    },
    {
      "id": "graceful-missing-resource",
      "name": "Graceful handling of missing resources",
      "description": "Return True with warning messages for missing files/databases that will be created later, avoiding false test failures",
      "domain": "python-testing",
      "confidence": 0.9
    },
    {
      "id": "set-comprehension-validation",
      "name": "Set operations for validation",
      "description": "Use set comprehensions and set difference operations to efficiently check for missing required items",
      "domain": "python-data-structures",
      "confidence": 0.85
    },
    {
      "id": "pathlib-glob-pattern",
      "name": "pathlib glob for directory scanning",
      "description": "Use Path.glob() to list files in directories with pattern matching",
      "domain": "python-file-operations",
      "confidence": 0.8
    },
    {
      "id": "emoji-test-output",
      "name": "Emoji-enhanced test output",
      "description": "Use emoji unicode characters in test output for visual pass/fail/warning indicators",
      "domain": "python-testing",
      "confidence": 0.75
    },
    {
      "id": "try-except-test-isolation",
      "name": "Exception isolation in test decorator",
      "description": "Wrap test execution in try-except blocks within decorator to catch and report errors without stopping test suite",
      "domain": "python-testing",
      "confidence": 0.9
    },
    {
      "id": "conditional-backend-detection",
      "name": "Runtime backend detection",
      "description": "Query library for backend information and display which backend is active (OpenAI/Local/Fallback)",
      "domain": "python-testing",
      "confidence": 0.75
    },
    {
      "id": "main-guard-pattern",
      "name": "__main__ guard for script execution",
      "description": "Use if __name__ == '__main__': guard to enable module to be both imported and executed directly",
      "domain": "python-script-structure",
      "confidence": 0.95
    },
    {
      "id": "exit-code-test-reporting",
      "name": "Exit codes for test success/failure",
      "description": "Use sys.exit(0) for success and sys.exit(1) for failure to enable shell script integration",
      "domain": "python-testing",
      "confidence": 0.9
    },
    {
      "id": "f-string-formatting",
      "name": "f-string for string interpolation",
      "description": "Use f-strings for clean, readable string formatting with embedded expressions",
      "domain": "python-string-handling",
      "confidence": 0.95
    },
    {
      "id": "docstring-documentation",
      "name": "Docstrings for function documentation",
      "description": "Provide docstrings for functions and modules to document purpose and usage",
      "domain": "python-documentation",
      "confidence": 0.9
    },
    {
      "id": "boolean-range-validation",
      "name": "Numeric range validation",
      "description": "Validate numeric results are within expected ranges using chained comparison operators (0.0 <= sim <= 1.0)",
      "domain": "python-validation",
      "confidence": 0.85
    }
  ]
}
