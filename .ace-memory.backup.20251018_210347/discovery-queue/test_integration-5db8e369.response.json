{
  "concrete": {
    "pytest-integration-testing": {
      "description": "pytest-based integration testing framework with fixtures, markers, and test helpers",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "@pytest.fixture",
        "@pytest.mark.integration",
        "pytest import"
      ],
      "patterns": [
        "Use pytest fixtures for test setup",
        "Use pytest.mark.integration for test categorization",
        "Import pytest for testing framework"
      ],
      "confidence": 0.95
    },
    "ace-plugin-workflow": {
      "description": "ACE orchestration plugin workflow testing including edit triggers, pattern storage, and playbook generation",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "ACETestHelper",
        "ace-cycle execution",
        "generate-playbook.py",
        "generate-speckit-playbook.py"
      ],
      "patterns": [
        "Test Edit → ace-cycle → patterns → playbooks workflow",
        "Mock agent responses for testing",
        "Verify pattern storage in SQLite",
        "Generate CLAUDE.md from patterns",
        "Generate spec-kit playbooks"
      ],
      "confidence": 0.98
    },
    "test-helper-abstraction": {
      "description": "Custom test helper class (ACETestHelper) for encapsulating ACE-specific test operations",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "from ace_test_helper import ACETestHelper",
        "ace_helper fixture",
        "ace_helper.mock_agent_response",
        "ace_helper.simulate_edit_tool",
        "ace_helper.get_db_patterns",
        "ace_helper.assert_pattern_stored"
      ],
      "patterns": [
        "Create custom test helper for domain-specific operations",
        "Encapsulate test setup in helper class",
        "Provide domain-specific assertion methods"
      ],
      "confidence": 0.92
    },
    "sqlite-pattern-storage": {
      "description": "SQLite database for storing discovered code patterns with verification methods",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "ace_helper.get_db_patterns()",
        "ace_helper.assert_pattern_stored('test-pattern-001')",
        "temp_db fixture"
      ],
      "patterns": [
        "Store patterns in SQLite database",
        "Query patterns from database for verification",
        "Use temporary database for testing"
      ],
      "confidence": 0.90
    },
    "subprocess-script-execution": {
      "description": "Execute Python scripts via subprocess for testing script integration",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "subprocess.run(['python3', str(ace_helper.plugin_root / 'scripts' / 'generate-playbook.py')])",
        "subprocess.run(['python3', str(ace_helper.plugin_root / 'scripts' / 'generate-speckit-playbook.py')])",
        "import subprocess"
      ],
      "patterns": [
        "Use subprocess.run for script execution",
        "Pass check=True for error handling",
        "Use str(Path) for cross-platform paths"
      ],
      "confidence": 0.88
    },
    "pathlib-file-operations": {
      "description": "Modern Python pathlib for file and directory operations in tests",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "from pathlib import Path",
        "ace_helper.project_root / 'app.py'",
        "test_file.write_text(sample_code)",
        "claude_md.read_text()",
        "specs_dir.mkdir(parents=True, exist_ok=True)"
      ],
      "patterns": [
        "Use pathlib.Path for file operations",
        "Use Path.write_text() for file creation",
        "Use Path.read_text() for file reading",
        "Use Path.mkdir(parents=True, exist_ok=True) for directory creation",
        "Use / operator for path joining"
      ],
      "confidence": 0.93
    },
    "multi-step-workflow-testing": {
      "description": "Step-by-step integration testing with explicit workflow stages and verification points",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "# Step 1: Mock agent response",
        "# Step 2: Simulate Edit tool",
        "# Step 3: Verify ace-cycle executed",
        "# Step 4: Verify pattern stored in SQLite",
        "# Step 5: Generate playbooks",
        "# Step 6: Verify CLAUDE.md created",
        "# Step 7: Generate spec-kit playbooks"
      ],
      "patterns": [
        "Break integration tests into numbered steps",
        "Add comments for each workflow stage",
        "Verify outputs at each critical stage",
        "Test end-to-end workflow from input to output"
      ],
      "confidence": 0.91
    },
    "fixture-composition": {
      "description": "pytest fixture composition pattern for building complex test scenarios from smaller fixtures",
      "evidence": [
        "plugins/ace-orchestration/tests/test_integration.py",
        "def ace_helper(plugin_root, temp_project, claude_env)",
        "def test_full_ace_workflow_edit_to_playbooks(ace_helper, temp_db, sample_code, mock_agent_response)"
      ],
      "patterns": [
        "Compose fixtures from multiple dependent fixtures",
        "Pass fixtures as function parameters",
        "Use fixture results to create higher-level fixtures"
      ],
      "confidence": 0.89
    }
  },
  "abstract": {
    "integration-testing-architecture": {
      "description": "Comprehensive integration testing pattern that validates multi-component workflows with mocking, execution, and verification stages",
      "instances": [
        "pytest-integration-testing",
        "ace-plugin-workflow",
        "multi-step-workflow-testing"
      ],
      "confidence": 0.94
    },
    "test-abstraction-pattern": {
      "description": "Encapsulation of test complexity through helper classes and fixtures to improve maintainability and reusability",
      "instances": [
        "test-helper-abstraction",
        "fixture-composition"
      ],
      "confidence": 0.90
    },
    "mock-and-verify-pattern": {
      "description": "Testing pattern that mocks inputs, executes workflows, and verifies outputs at multiple checkpoints",
      "instances": [
        "ace-plugin-workflow",
        "multi-step-workflow-testing",
        "sqlite-pattern-storage"
      ],
      "confidence": 0.92
    },
    "script-integration-testing": {
      "description": "Testing pattern for validating Python script execution and output generation in isolated environments",
      "instances": [
        "subprocess-script-execution",
        "pathlib-file-operations",
        "multi-step-workflow-testing"
      ],
      "confidence": 0.88
    }
  },
  "principles": {
    "modern-python-stdlib": {
      "description": "Prefer modern Python standard library APIs (pathlib, subprocess) over legacy alternatives (os.path, os.system)",
      "applied_in": [
        "pathlib-file-operations",
        "subprocess-script-execution"
      ],
      "confidence": 0.91
    },
    "test-isolation": {
      "description": "Ensure tests run in isolated environments with temporary resources (temp_db, temp_project) to prevent side effects",
      "applied_in": [
        "fixture-composition",
        "pytest-integration-testing",
        "sqlite-pattern-storage"
      ],
      "confidence": 0.93
    },
    "explicit-verification": {
      "description": "Verify system behavior at multiple checkpoints with explicit assertions rather than implicit success assumptions",
      "applied_in": [
        "multi-step-workflow-testing",
        "mock-and-verify-pattern"
      ],
      "confidence": 0.94
    },
    "separation-of-concerns": {
      "description": "Separate test setup, execution, and verification into distinct stages with clear responsibilities",
      "applied_in": [
        "test-abstraction-pattern",
        "integration-testing-architecture"
      ],
      "confidence": 0.89
    },
    "documentation-through-code": {
      "description": "Use descriptive test names, step comments, and clear assertion messages to document expected behavior",
      "applied_in": [
        "multi-step-workflow-testing",
        "integration-testing-architecture"
      ],
      "confidence": 0.87
    }
  },
  "metadata": {
    "total_patterns_analyzed": 8,
    "discovery_method": "bottom-up from file paths and code structure analysis",
    "discovered_at": "2025-10-18T00:00:00Z"
  }
}
