{
  "code_snippet": "\"\"\"Integration tests for full ACE workflow\"\"\"\n\nimport pytest\nimport subprocess\nfrom pathlib import Path\nfrom ace_test_helper import ACETestHelper\n\n\n@pytest.fixture\ndef ace_helper(plugin_root, temp_project, claude_env):\n    \"\"\"Create ACE test helper instance.\"\"\"\n    return ACETestHelper(plugin_root, temp_project, claude_env)\n\n\n@pytest.mark.integration\ndef test_full_ace_workflow_edit_to_playbooks(ace_helper, temp_db, sample_code, mock_agent_response):\n    \"\"\"Test complete ACE workflow: Edit \u2192 ace-cycle \u2192 patterns \u2192 playbooks.\"\"\"\n    # Step 1: Mock agent response\n    ace_helper.mock_agent_response('reflector', mock_agent_response, 'app.py')\n\n    # Step 2: Simulate Edit tool (triggers PostToolUse \u2192 ace-cycle)\n    test_file = ace_helper.project_root / 'app.py'\n    test_file.write_text(sample_code)\n\n    result = ace_helper.simulate_edit_tool(\n        file_path='app.py',\n        old_string='def foo(): pass',\n        new_string='def foo():\\n    return \"bar\"'\n    )\n\n    # Step 3: Verify ace-cycle executed\n    assert result.exit_code == 0\n\n    # Step 4: Verify pattern stored in SQLite\n    patterns = ace_helper.get_db_patterns()\n    assert len(patterns) > 0\n    assert ace_helper.assert_pattern_stored('test-pattern-001')\n\n    # Step 5: Generate playbooks\n    subprocess.run(\n        ['python3', str(ace_helper.plugin_root / 'scripts' / 'generate-playbook.py')],\n        cwd=str(ace_helper.project_root),\n        check=True\n    )\n\n    # Step 6: Verify CLAUDE.md created\n    claude_md = ace_helper.project_root / 'CLAUDE.md'\n    assert claude_md.exists()\n\n    content = claude_md.read_text()\n    assert 'ACE Plugin Instructions' in content\n    assert 'Total patterns' in content\n\n    # Step 7: Generate spec-kit playbooks\n    specs_dir = ace_helper.project_root / 'specs'\n    specs_dir.mkdir(parents=True, exist_ok=True)\n\n    subprocess.run(\n        ['python3', str(ace_helper.plugin_root / 'scripts' / 'generate-speckit-playbook.py')],\n        cwd=str(ace_helper.project_root),\n        check=T",
  "full_code_length": 7065,
  "file_path": "plugins/ace-orchestration/tests/test_integration.py",
  "language": "python",
  "training_mode": "offline",
  "request_id": "test_integration-5db8e369"
}