{
  "concrete": {
    "claude-code-cli-testing": {
      "description": "Testing utilities for Claude Code CLI plugin hooks and agent interactions",
      "evidence": [
        "plugins/ace-orchestration/tests/ace_test_helper.py",
        "ACETestHelper class simulating Claude Code CLI behavior",
        "run_hook() method for hook script execution"
      ],
      "patterns": [
        "Simulate CLI environment with env variables",
        "Execute hooks via subprocess with JSON stdin/stdout",
        "Dataclass for structured result objects",
        "Path-based script discovery pattern"
      ],
      "confidence": 0.95
    },
    "hook-execution-framework": {
      "description": "Framework for executing and testing plugin hooks with JSON I/O protocol",
      "evidence": [
        "plugins/ace-orchestration/tests/ace_test_helper.py",
        "HookResult dataclass with exit_code/stdout/stderr/json_response",
        "JSON input piping to stdin, JSON response parsing from stdout"
      ],
      "patterns": [
        "Subprocess execution with timeout",
        "JSON-based hook communication protocol",
        "Capture and parse stdout/stderr",
        "Environment variable propagation"
      ],
      "confidence": 0.92
    },
    "python-testing-utilities": {
      "description": "Python-based testing helper modules using pathlib and subprocess",
      "evidence": [
        "plugins/ace-orchestration/tests/ace_test_helper.py",
        "pathlib.Path for file operations",
        "subprocess module for process execution",
        "dataclasses for type-safe data structures"
      ],
      "patterns": [
        "Use pathlib over os.path",
        "Dataclass for structured data",
        "Type hints for method signatures",
        "Copy environment dict to prevent mutation"
      ],
      "confidence": 0.88
    }
  },
  "abstract": {
    "test-isolation-architecture": {
      "description": "Architecture for isolated testing of CLI tools without interactive shells",
      "instances": [
        "claude-code-cli-testing",
        "hook-execution-framework"
      ],
      "confidence": 0.90
    },
    "json-based-ipc": {
      "description": "Inter-process communication using JSON over stdin/stdout",
      "instances": [
        "hook-execution-framework"
      ],
      "confidence": 0.91
    },
    "path-based-configuration": {
      "description": "Using Path objects for plugin and project root configuration",
      "instances": [
        "claude-code-cli-testing",
        "python-testing-utilities"
      ],
      "confidence": 0.85
    },
    "structured-result-pattern": {
      "description": "Using dataclasses to represent operation results with multiple fields",
      "instances": [
        "hook-execution-framework",
        "python-testing-utilities"
      ],
      "confidence": 0.87
    }
  },
  "principles": {
    "modern-python-apis": {
      "description": "Prefer modern standard library APIs (pathlib, dataclasses, type hints)",
      "applied_in": [
        "python-testing-utilities",
        "structured-result-pattern"
      ],
      "confidence": 0.90
    },
    "explicit-dependency-injection": {
      "description": "Pass dependencies (paths, env) explicitly via constructor rather than globals",
      "applied_in": [
        "test-isolation-architecture",
        "path-based-configuration"
      ],
      "confidence": 0.88
    },
    "separation-of-concerns": {
      "description": "Separate test helpers from actual implementation code",
      "applied_in": [
        "claude-code-cli-testing"
      ],
      "confidence": 0.86
    },
    "immutability-by-default": {
      "description": "Copy mutable inputs (env.copy()) to prevent side effects",
      "applied_in": [
        "test-isolation-architecture"
      ],
      "confidence": 0.84
    },
    "protocol-based-integration": {
      "description": "Define clear communication protocols (JSON stdin/stdout) for inter-process integration",
      "applied_in": [
        "json-based-ipc",
        "hook-execution-framework"
      ],
      "confidence": 0.92
    }
  },
  "metadata": {
    "total_patterns_analyzed": 1,
    "discovery_method": "bottom-up from file paths and code structure analysis",
    "discovered_at": "2025-10-18T15:57:30Z"
  }
}
