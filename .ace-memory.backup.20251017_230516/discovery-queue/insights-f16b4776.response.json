{
  "concrete": {
    "ace-orchestration-scripts": {
      "description": "Python scripts for ACE (Agentic Context Engineering) orchestration including offline training, playbook injection, and spec-kit generation",
      "evidence": [
        "plugins/ace-orchestration/scripts/offline-training.py",
        "plugins/ace-orchestration/scripts/inject-playbook.py",
        "plugins/ace-orchestration/scripts/generate-speckit-playbook.py"
      ],
      "patterns": ["py-003: Avoid bare except"],
      "confidence": 0.95
    },
    "ace-pattern-specs": {
      "description": "ACE pattern specification system with metadata-driven markdown files for tracking coding patterns",
      "evidence": [
        "plugins/ace-orchestration/specs/playbooks/003-avoid-bare-except/spec.md",
        "plugins/ace-orchestration/specs/playbooks/003-avoid-bare-except/plan.md",
        "plugins/ace-orchestration/specs/playbooks/003-avoid-bare-except/insights.md"
      ],
      "patterns": ["py-003: Avoid bare except"],
      "confidence": 0.9
    }
  },
  "abstract": {
    "python-exception-handling": {
      "description": "Python error handling patterns, specifically identifying and avoiding bare except clauses that catch all exceptions including system exits",
      "instances": ["ace-orchestration-scripts"],
      "confidence": 0.85
    },
    "pattern-learning-system": {
      "description": "Meta-learning system that tracks coding patterns through observations, confidence scoring, and automated reflection",
      "instances": ["ace-pattern-specs", "ace-orchestration-scripts"],
      "confidence": 0.9
    },
    "anti-pattern-detection": {
      "description": "Identification and documentation of harmful coding patterns to avoid in production code",
      "instances": ["python-exception-handling"],
      "confidence": 0.8
    }
  },
  "principles": {
    "defensive-error-handling": {
      "description": "Avoid catching all exceptions blindly; use specific exception types to prevent masking critical system signals like KeyboardInterrupt",
      "applied_in": ["python-exception-handling", "anti-pattern-detection"],
      "confidence": 0.85
    },
    "evidence-based-learning": {
      "description": "Track pattern usage through observations, success/failure metrics, and confidence scoring to build empirical knowledge",
      "applied_in": ["pattern-learning-system"],
      "confidence": 0.9
    },
    "metadata-driven-documentation": {
      "description": "Use frontmatter metadata in markdown files to enable programmatic processing while maintaining human readability",
      "applied_in": ["pattern-learning-system"],
      "confidence": 0.85
    }
  },
  "metadata": {
    "total_patterns_analyzed": 1,
    "discovery_method": "bottom-up from file paths and descriptions",
    "discovered_at": "2025-10-17T22:48:00Z"
  }
}
